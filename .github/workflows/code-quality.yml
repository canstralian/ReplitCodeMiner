
name: Code Quality Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive quality check
      run: npm run quality:check
      
    - name: Check unused dependencies
      run: npm run deps:check
      
    - name: Generate complexity reports
      run: |
        npm run complexity || true
        npm run complexity:graph || true
        
    - name: Analyze bundle size
      run: |
        npm run build
        npm run bundle:analyze || true
        
    - name: Advanced code analysis
      run: |
        # Type coverage analysis
        npx type-coverage --detail --strict || true
        
        # Duplicate code detection
        npx jscpd --reporters=json --output=./jscpd-report.json . || true
        
        # Dead code elimination check
        npx ts-prune --error || true
        
    - name: Detect secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        
    - name: Comment PR with quality metrics
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            // ESLint Report
            const eslintReport = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
            const totalErrors = eslintReport.reduce((sum, file) => sum + file.errorCount, 0);
            const totalWarnings = eslintReport.reduce((sum, file) => sum + file.warningCount, 0);
            
            // Dependency Report
            let unusedDeps = 0;
            try {
              const depReport = JSON.parse(fs.readFileSync('dependency-report.json', 'utf8'));
              unusedDeps = Object.keys(depReport.dependencies || {}).length;
            } catch (e) { /* ignore */ }
            
            // Complexity Report
            let circularDeps = 0;
            try {
              const complexityReport = JSON.parse(fs.readFileSync('complexity-report.json', 'utf8'));
              circularDeps = Array.isArray(complexityReport) ? complexityReport.length : 0;
            } catch (e) { /* ignore */ }
            
            // Security Report
            let vulnerabilities = 0;
            try {
              const secReport = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              vulnerabilities = secReport.metadata?.vulnerabilities?.total || 0;
            } catch (e) { /* ignore */ }
            
            const comment = `## 📊 Comprehensive Code Quality Report
            
            ### 🔍 Static Analysis
            - **ESLint Errors:** ${totalErrors}
            - **ESLint Warnings:** ${totalWarnings}
            - **Files Analyzed:** ${eslintReport.length}
            
            ### 📦 Dependencies
            - **Unused Dependencies:** ${unusedDeps}
            - **Circular Dependencies:** ${circularDeps}
            
            ### 🔒 Security
            - **Vulnerabilities:** ${vulnerabilities}
            
            ### 📈 Status
            ${totalErrors > 0 ? '❌ Fix ESLint errors before merging' : 
              unusedDeps > 5 ? '⚠️ Consider cleaning up unused dependencies' :
              circularDeps > 0 ? '⚠️ Circular dependencies detected' :
              vulnerabilities > 0 ? '⚠️ Security vulnerabilities found' :
              '✅ All quality checks passed!'}
            
            ---
            📁 **Artifacts:** Check the workflow artifacts for detailed reports and dependency graph visualization.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not generate quality report comment:', error.message);
          }
